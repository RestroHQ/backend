generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  ADMIN
  CASHIER
  USER
}

enum RestaurantStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model User {
  id        String            @id @default(cuid())
  name      String?
  username  String?           @unique
  email     String            @unique
  password  String
  phone     String?
  role      Role              @default(USER)
  image     String?
  isActive  Boolean           @default(true)
  deletedAt DateTime?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  staffAt   RestaurantStaff[]
  

  ownedRestaurants Restaurant[] @relation("RestaurantOwner")
  reservations     Reservation[]
}

model Restaurant {
  id          String           @id @default(cuid())
  name        String
  address     String
  phone       String
  email       String           @unique
  website     String?
  logo        String?
  coverImage  String?
  cuisineType String
  status      RestaurantStatus @default(ACTIVE)
  ownerId     String
  deletedAt   DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  openingTime String
  closingTime String
  openDays    String[]

  taxNumber         String?
  description       String?
  capacity          Int?
  isDeliveryEnabled Boolean           @default(false)
  staff             RestaurantStaff[]
  tables            Table[]
  reservations      Reservation[]
  timeSlots        TimeSlot[]

  owner User @relation("RestaurantOwner", fields: [ownerId], references: [id])

  @@index([ownerId])
}

model RestaurantStaff {
  id           String     @id @default(cuid())
  restaurantId String
  userId       String
  joinedAt     DateTime   @default(now())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([restaurantId, userId])
  @@index([restaurantId])
  @@index([userId])
}



model Table {
  id            String     @id @default(cuid())
  restaurantId  String
  name          String     
  capacity      Int       
  isAvailable   Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  reservations  Reservation[]

  @@index([restaurantId])
}

model Reservation {
  id           String    @id @default(cuid())
  restaurantId String
  tableId      String
  userId       String
  timeSlotId   String
  guestCount   Int
  status       ReservationStatus @default(PENDING) 
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  table        Table      @relation(fields: [tableId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
  timeSlot     TimeSlot   @relation(fields: [timeSlotId], references: [id])

  @@index([restaurantId])
  @@index([tableId])
  @@index([userId])
  @@index([timeSlotId])
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}


model TimeSlot {
  id           String    @id @default(cuid())
  restaurantId String
  startTime    DateTime
  endTime      DateTime
  capacity     Int       
  isAvailable  Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  reservations Reservation[]

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@index([restaurantId, startTime, endTime])
}
